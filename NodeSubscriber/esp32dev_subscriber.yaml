esphome:
  name: esp32sub01
  friendly_name: esp32sub01

esp32:
  board: esp32dev
  framework:
    type: arduino

# ใช้ตัวแปรสำหรับเก็บค่า
substitutions:
  esp_name: esp32dev_sub01  # กำหนดชื่อย่อของ ESP32 อุปกรณ์นี้

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "TDMSsVjcmcOP7zR8GL1yGkyeZDStJc+QScuXJtk4OPM="

ota:
  - platform: esphome
    password: "6800ad4ab9739b76fd7ad155fa242a83"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none  # ปิดโหมดประหยัดพลังงาน Wi-Fi เพื่อให้การเชื่อมต่อเสถียรขึ้น

  # กำหนดค่า IP แบบคงที่ (Static IP) สำหรับ ESP32
  manual_ip:
    static_ip: 192.168.1.94  # ตั้งค่า IP ของ ESP32 ในเครือข่าย
    gateway: 192.168.1.1  # กำหนด IP ของ Router (เกตเวย์ของเครือข่าย)
    subnet: 255.255.255.0  # กำหนดค่าซับเน็ต (Subnet Mask) ของเครือข่าย
    dns1: 192.168.1.1  # ตั้งค่า DNS เป็น Router (ใช้เป็น DNS Server)

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32Sub01 Hotspot"
    password: "0814111142"

# ใช้ on_connect trigger เพื่อตั้งค่าการทำงานเมื่ออุปกรณ์เชื่อมต่อ Wi-Fi สำเร็จ
  on_connect:
    then:
      - switch.turn_on: gpio2  # เปิดใช้งาน GPIO2 เมื่อเชื่อมต่อ Wi-Fi สำเร็จ

# ใช้ Home Assistant เป็นแหล่งข้อมูลเวลา
time:
  - platform: homeassistant  # ซิงค์เวลาจาก Home Assistant
    id: homeassistant_time  # กำหนดตัวระบุของ time component นี้

# ✅ เพิ่ม MQTT Client สำหรับเชื่อมต่อกับ MQTT Broker
mqtt:
  broker: "192.168.1.201"  # ระบุที่อยู่ IP ของ MQTT Broker (เช่น Home Assistant หรือ Mosquitto)
  username: "sompoch"  # ชื่อผู้ใช้สำหรับเข้าสู่ระบบ MQTT (ถ้ากำหนดไว้)
  password: "0814111142"  # รหัสผ่านสำหรับเข้าสู่ระบบ MQTT (ถ้ากำหนดไว้)

# ✅ เปิดใช้งาน Captive Portal 
# ฟีเจอร์นี้ช่วยให้สามารถเข้าถึงอุปกรณ์ผ่าน Wi-Fi Hotspot เมื่อการเชื่อมต่อ Wi-Fi ปกติล้มเหลว
captive_portal:

# ✅ เพิ่ม Binary Sensor เพื่อตรวจสอบสถานะ Wi-Fi
binary_sensor:
  - platform: status
    name: "WiFi Status"
    id: wifi_status
    
switch:
# switch for GPIO2
  - platform: gpio
    id: gpio2
    pin: 2
    restore_mode: ALWAYS_OFF

# Turn on GPIO2 when WiFi is connected
  - platform: template
    name: "WiFi Connected Switch"
    turn_on_action:
      then:
        - switch.turn_on: gpio2
    lambda: |-
      return id(wifi_status).state;   

# ✅ ใช้ text_sensor แทน sensor.mqtt เพื่อรับค่าจาก MQTT
text_sensor:
  # ✅ Text Sensor สำหรับอุณหภูมิ (Temperature)
  - platform: mqtt_subscribe
    name: "TLoRa:DHT22 Temperature"  # ชื่อที่แสดงใน Home Assistant
    id: dht22_temperature  # ID สำหรับใช้งานภายใน ESPHome
    topic: "helteclora32/NodeV3/node1/temperature"  # กำหนด MQTT Topic สำหรับรับค่าอุณหภูมิ

  # ✅ Text Sensor สำหรับความชื้น (Humidity)
  - platform: mqtt_subscribe
    name: "TLoRa:DHT22 Humidity"  # ชื่อที่แสดงใน Home Assistant
    id: dht22_humidity  # ID สำหรับใช้งานภายใน ESPHome
    topic: "helteclora32/NodeV3/node1/humidity"  # กำหนด MQTT Topic สำหรับรับค่าความชื้น

  # ✅ Text Sensor สำหรับค่าความชื้นในดิน (Soil Moisture)
  - platform: mqtt_subscribe
    name: "TLoRa:Soil Moisture"  # ชื่อที่แสดงใน Home Assistant
    id: soil_moisture  # ID สำหรับใช้งานภายใน ESPHome
    topic: "helteclora32/NodeV3/node1/soil_moisture"  # กำหนด MQTT Topic สำหรับรับค่าความชื้นในดิน

# ✅ ตั้งค่า Sensor สำหรับรับค่าและแปลงค่าจากข้อความเป็นตัวเลข
sensor:
  # ✅ Sensor สำหรับอุณหภูมิ (Temperature)
  - platform: template
    name: "SLoRa Temperature"
    id: lora_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    update_interval: 10s
    lambda: |-
      float temp_value = NAN;
      std::string raw_data = id(dht22_temperature).state;

      size_t t_pos = raw_data.find("T:");
      size_t h_pos = raw_data.find("H:");
      size_t end_pos = raw_data.find(",");

      if (t_pos != std::string::npos) {
        temp_value = std::stof(raw_data.substr(t_pos + 2, end_pos - t_pos - 2));
      }

      ESP_LOGD("LoRa", "Parsed Temperature: %.2f", temp_value);
      return temp_value;

  - platform: template
    name: "SLoRa Humidity"
    id: lora_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 10s
    lambda: |-
      float humidity_value = NAN;
      std::string raw_data = id(dht22_humidity).state;

      size_t h_pos = raw_data.find("H:");
      size_t soil_pos = raw_data.find("Soil:");

      if (h_pos != std::string::npos) {
        humidity_value = std::stof(raw_data.substr(h_pos + 2, soil_pos - h_pos - 2));
      }

      ESP_LOGD("LoRa", "Parsed Humidity: %.2f", humidity_value);
      return humidity_value;

  - platform: template
    name: "SLoRa Soil Moisture"
    id: lora_soil_moisture
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 10s
    lambda: |-
      float soilmoisture_value = NAN;
      std::string raw_data = id(soil_moisture).state;

      size_t soil_pos = raw_data.find("Soil:");

      if (soil_pos != std::string::npos) {
        soilmoisture_value = std::stof(raw_data.substr(soil_pos + 5));
      }

      ESP_LOGD("LoRa", "Parsed Soil Moisture: %.2f", soilmoisture_value);
      return soilmoisture_value;


#Check Uptime
  - platform: uptime
    name: "${esp_name} - Uptime"
    icon: mdi:clock-outline
    update_interval: 60s

#Wi-Fi Signal in dB    
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${esp_name} - WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

#Wi-Fi Signal in %
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${esp_name} - WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""        
